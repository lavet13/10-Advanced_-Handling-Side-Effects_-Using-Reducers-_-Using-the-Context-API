What is an effect, also called a side-effect and I will use these terms interchangeably. So when I say effect
I mean side-effect and the other way around. But what is that? Well, let's not forget that our components in the React app
and our React app as a whole and also especially the React library itself has one main job to render UI to react to our 
user input, to re-render the UI when it's needed. That is what we focused on thus far with state and events and all of that.
The main job was to bring something onto the screen and to make sure that the user may interact with that something
and that what's shown on the screen may change based on certain events. For example, based on a button click or some text
being entered. So therefore that's the main job of React and of our application. We wanna evaluate and render the JSX code
in the DOM. We wanna manage state and props to make sure that every component has the data it needs and that we reflect
the user input correctly. We wanna React to user events as mentioned and of course React is there to also re-evaluate our
components and their JSX code and manipulate the real DOM as needed. So that's all baked into React with the tools and 
features we learned this far. So something like useState hook, props and so on. Component is just a function therefore it's 
execution top to bottom and everything in that function in the end deals with bringing something onto the screen and 
with reacting to user input to clicks and so on. So that's what function is all about. We may use useState in there, we
may have other functions in there, which for example are triggered upon a button press and so on. But everything we have
in this component function is concerned with bringing something onto the screen.

Now, therefore side-effects are everything else that might be happening in your application. And a good example here is 
sending a HTTP-request or storing something in browser storage in local storage for example. But you could also think
about timers or intervals. These tasks are all not related to bringing something onto the screen. At least not directly.
Of course you might be sending a HTTP-request to then draw something onto the screen once you got the response, but sending
the request itself and handling potential errors and so on, that's not something you need React for, that's not something
React cares about, that's not what React is. Therefore it's not something that is related to drawing something onto the screen
directly or anything like that. So these are therefore tasks which must happen outside of the normal component evaluation.
So outside of your normal component function. Because you must not forget that this function, this App function for example
is re-executed by React automatically whenever for example state changes. Whenever isLoggedIn state would change, this entire 
function re-runs and React then basically checks what the new result of this function execution. So the new JSX code looks like
and if compared to the previous result it should go to the real DOM and make some changes there.

Now, if we would send a HTTP-request for example, directly in the component function, then we would send this request
whenever this function re-runs. So for example, whenever this state changes and that might sometimes be what you want
but definitely not always. And if in response to your HTTP-request you for example eventually change some state, you would
even create an infinite loop. Because you would send the request whenever the function re-runs. And in response to your request
you change some state which triggers this function again. So therefore such side effects should not go directly into component
function because that would most likely create bugs, infinite loops or simply send too many HTTP-requests to stick with that
example.

Therefore we'll have a better tool for handling side effects and that's a special React Hook which we can use.
The useEffect hook. The useEffect hook is simply another built in hook. So another function you can run inside of your
component function that will do something special. The useEffect hook is called with two arguments, with two parameters

useEffect(() => { ... }, [dependencies]);

The first argument is a function that should be executed AFTER every component evaluation IF the specified dependencies changed.
And the specified dependencies are the second argument that you pass in. That's an array full of dependencies and whenever
such a dependency changes that first function will re-run. And therefore in that first function you can put any side effect
code and that code will then only execute when the dependencies specified by you changed and not when the component re-renders.
So only when your dependencies changed.

# Introducing useReducer() for State Management
useReducer is another built-in hook and it will help us with state management. So it's a bit like useState, but actually with
more capabilities and especially useful for more complex state. Sometimes you have more complex state, for example 
multiple states that kind of belong together, that are managing the same thing just different aspects of it.
Or you have multiple states that kind of change together or are related. 
In such cases, useState and the state you get from there often becomes hard or error-prone to use and manage.
And it's easy then to write bad or inefficient or potentially buggy code, which is of course it's never what we want.
useReducer() can be used as a replacement for useState() if you need "more powerful state management". Now this does not
mean that you should always use useReducer because it's more powerful, so it's always better. No, because it's also a bit 
more complex to use, it requires a bit more setup. So for a lot of scenarios for the majority I would argue you probably use
useState. But there are cases where the extra work of getting useReducer to work, is just worth it.

# Using the useReducer() hook
const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);
useReducer just like useState always returns an array with exactly two values. And therefore you can use array destructuring
as we did it with useState to pull out these values and store them in separate constants.
First value: latest state snapshot, because it's a state management mechanism like useState.
Second value: function that allows you to update that state snapshot.

So that's kind of the same as for useState, though the state updating function will work differently.
Instead of just setting a new state value, you will dispatch an action. And that action will be consumed by the first
argument you pass to useReducer a so-called reducer function(reducerFn).

So reducer function gets the latest state snapshop automatically because this function will be called by React
AND it gets the action that was dispatched. Because React will call this reducer function whenever a new action is dispatched
(via dispatchFn). 
Now, the reducer function then also should do one important thing. It should return a new updated state. So it's a bit like
the function form of the useState hook, but an extended version of that, you could say, because of that action thing, which
you'll see in action, no pun intended, in a second.

In addition, you can also set some initial state(initialState) and also an initial function(initFn) that should run to set
the initial state in case your initial state is a bit more complex. And, for example, the result of let's say HTTP requests
or anything like that. We'll ignore that for now. So that's useReducer in theory.

# Introducing useReducer & Reducers in General

Here, we managing a couple of states snapshots, and you might be able to spot some related state here.
We managed the enteredEmail and the enteredPassword, but then we also managed the fact or the question
the response to the question, whether the email or the password is valid. And we managed the overall
form validity. So you could argue that overall, this is all one big state that describes the overall
form state. The inputs are part of that, or you at least treat every input as one entity and one state,
which simply has two aspects. The value the user entered and the validity of that input.
And it becomes clear that we have some work to do and some redundancy if we consider the fact that
we're setting the overall form validity, by checking the validity of email and password when we're
doing the exact same thing for our two validate handlers. Now, we could re-write this in various ways
and for example, use our emailIsValid and passwordIsValid states in the useEffect hook and just use those
two states to confirm whether the overall form is valid and that it would work. But nonetheless,
we at least have these two states, the enteredEmail and the validity of the email that clearly kind of belong
together, and which we therefore might wanna manage together. In addition, I wanna come back to something
which we don't have anymore because we're using useEffect, but what we had before you might remember that
inside of emailChangeHandler and passwordChangeHandler, we had a slightly different code. That approach also
worked but we had some code re-usage which is why the useEffect was a better result. But let's say for
whatever reason you don't wanna take the route to useEffect. In that case, you would have another problem
and I'm just going back to the solution to show you this problem which you can have in some apps and in some
use cases. For example, we are updating some state the form validity state, based on two other states.
Now, what did you learn about updating the state based on some older state? You wanna use the function form.
Now, that doesn't work however, because that's only true if your next state update, depends on the previous
state snapshot of the same state. But here we depend on two other states snapshots of different state of
the enteredEmail and the enteredPassword, not on the last state snapshot of the form validity.
So therefore here actually we're doing something which you normally shouldn't do, because the way React
schedules state updates,
this code "setFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6)"
could actually in rare cases, but it could actually lead to the scenario
where "setFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6)" runs before, for example,
password state update was processed. So therefore enteredPassword when this
"setFormIsValid(event.target.value.includes('@') && enteredPassword.trim().length > 6)" code runs,
might not contain the latest enteredPassword, because of how React schedules state updates.
That's why I said before, and why I urged you to use the function form.
But again, it's not available here, because we're depending on two other states and not the last snapshot of this form
validity state. This is another scenario where you could use useReducer. So it's a good use case, a good replacement
of the useState. When you have states that belongs together, for example, enteredEmail and the validity
of the email's value or if you have state updates that depend on other state.
We already violate this rule of using the function form if a state update depends on an older state.
Here in our validateEmail and validatePassword handlers. There, we are calling setEmailIsValid and setPasswordIsValid
to set new states, for this emailIsValid and passwordIsValid state. Now, how are we setting these states? Well, by
having a look at another state and calling a method on it. (example: enteredEmail.includes('@')). We're having a look
at the enteredEmail state, which is a different state. Sure, they are related. They both changed because of what
the user entered, but technically these are two different states, two different variables. And we are deriving(выводим)
our new emailIsValid state by looking at another state and that is something we should not do.
It works in most cases, but in some scenarios it could not work because maybe some state update for enteredEmail
wasn't processed in time. And then we would try to update emailIsValid, based on some outdated enteredEmail state.
That is a scenario where useReducer is always a good choice. If you update a state, which depends on different state
then merging this into one state could be a good idea. And you can do that without useReducer as well. You could
simply manage an email state, which is an object with the value and the valid being part of the same object.
You could do it with the useState, but in such cases when your state becomes more complex, bigger and combines multiple
related states, useReducer can also be worth a closer look.


# useReducer - это React-хук, который предоставляет более мощный способ управления состоянием в компонентах, чем useState. Он предоставляет способ управления состоянием, основанный на действиях (actions) вместо прямого изменения состояния.

Синтаксис useReducer выглядит следующим образом:

javascript
Copy code
const [state, dispatch] = useReducer(reducer, initialState);
где state - текущее состояние, dispatch - функция, которая позволяет отправлять действия (actions) для изменения состояния, reducer - функция, которая принимает текущее состояние и действие, и возвращает новое состояние, а initialState - начальное состояние.

reducer должен быть чистой функцией, которая не изменяет свой входной аргумент и возвращает новое состояние в зависимости от типа действия. Действия (actions) - это объекты, которые содержат тип и (необязательно) данные для обновления состояния. Пример действия:

javascript
Copy code
{ type: 'INCREMENT', payload: 1 }
где type - строка, определяющая тип действия, и payload - данные, связанные с действием.

Пример использования useReducer:

javascript
Copy code
import React, { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + action.payload };
    case 'DECREMENT':
      return { count: state.count - action.payload };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'INCREMENT', payload: 1 })}>Increment</button>
      <button onClick={() => dispatch({ type: 'DECREMENT', payload: 1 })}>Decrement</button>
    </div>
  );
}
Этот компонент Counter использует useReducer для управления состоянием счетчика. Он передает начальное состояние и функцию редуктора reducer в useReducer, а затем использует dispatch для отправки действий для изменения состояния.

useReducer может использоваться для управления более сложными состояниями и обработки нескольких типов действий. Например, он может использоваться для управления формой, где действия могут быть отправкой данных, изменением поля ввода и т.д.


# useEffect & Dependencies

we could remove dependencies array but don't save this because this would crash your page.
This would run whenever this component was reevaluated. It's the same as if we wouldn't have used the useEffect hook at all.
There is a simple rule you add as dependencies, what you're using in your side effect function. So in this case, we are using, the setFormIsValid
function. We are using enteredEmail and we are using enteredPassword. These are three things we are using here. So therefore, here, between these
brackets, you would add, setFormIsValid, enteredEmail, enteredPassword. Now actually, you can also omit setFormIsValid because those state updating
function by default are insured by React to never change. So these functions will always be the same across re-render cycles, so you can omit them.
Now, one aspect that could be confusing, is that of course now, inside of useEffect example, we're not working with local storage. We're not sending
an HTTP request. We're not setting a timer or anything like that. Instead we're updating the React state and that could be confusing if you'll recall
that slide from earlier, where I had a slightly different separation. So to clear that confusion, you must not forget, that it's called useEffect,
and it has one main job, it's there to handle side effects and often side effects are HTTP requests and so on, but it's also a side effect if we
listen to every keystroke and save that entered data as we're doing it in the emailChangeHandler for example and we then wanna trigger another action
in response to that. So checking and updating that form validity, in response to a keystroke in the email or a password field, that is also something
you could call a side effect. It's a side effect of the user entering data. So that's why this should not confuse you.
useEffect in general, is a super important hook that helps you deal with code that should be executed in response to something. And something could be
the component being loaded. It could be the email address being updated. It could be anything, whenever you have an action that should be executed in
response to some other action that is a side effect and that is where a useEffect is able to help you.


# useEffect Summary

Rarely used, because it runs when the component first mounts, when component is rendered for the first time, but then also for every state update.
We learned that the effect function runs AFTER every component render cycle. Not before it and not during it, but AFTER it, including the first time
this component was mounted.
  useEffect(() => {
    console.log('EFFECT RUNNING');
  });

Now, this changes once we add an empty array. Now this function here, only executes for the first time this component
was mounted and rendered, but not thereafter, not for any subsequent rerender cycle. So it really only ran once.
  useEffect(() => {
    console.log('EFFECT RUNNING');
  }, []);

Alternatively, we add a dependency like enteredEmail or enteredPassword. Now this function here, reruns whenever the component was re-evaluated only IF
dependencies were changed.
  useEffect(() => {
    console.log('EFFECT RUNNING');
  }, [enteredPassword]);

We also have a cleanup function, which we can return. This cleanup function runs before this effect function, but not before
the first time(not in my case) it runs. Now, if we had an empty array here, so no dependencies, we learned that we only see
effect running once, and the cleanup function in this case, would run when the component is removed. So in this case, when I log in and the component
is removed from the DOM, we will see EFFECT CLEANUP. So that's how useEffect works, and how the different parts of it are related, and when they
execute.

useEffect(() => {
    console.log('EFFECT RUNNING 2');

    return () => {
      console.log('EFFECT CLEANUP 2');
    };
}, []);

# useReducer vs useState for State Management
Generally, you will know when you need useReducer. That might not be the greatest rule of all times, but you will see when
you need useReducer, for example, because using useState becomes too cumbersome, you find yourself dealing with a lot of kind
of related state snapshots, which still are kind of independent and you start updating them together in a way that just doesn't
work out. Then, you want to consider using useReducer.

useState:
1) The main state management "tool".
2) It's great for independent pieces of state and data. 
3) It's great if state updates are easy and limited to a few kinds of updates. So if you don't have a lot of different cases
that will change a state and especially if you don't have, let's say, an object as a state or anything like that.

useReducer:
1) Great if you need "more power"
Now, if you do have an object as a state or a more complex state useReducer might be interesting because, in general, 
useReducer is great if you need more power and with more power, I simply mean that you can write such a reducer function
that can contain more complex state updating logic where you always are guaranteed to work with the latest state snapshot.
And where you can move that potentially more complex logic out of your component function body into a separate reducer function.
So, also to restructure code, that might be interesting.

2) Should be considered if you have related pieces of state/data
You should especially consider useReducer, if you're dealing with related data, with state that is made up of related pieces
of state. So when you, for example, have a scenario, as we had it with our form input state. 

3) Can be helpful if you have more complex state updates
And, in general, useReducer can be helpful if you have more complex state updates, if you have different cases, 
different actions that can change a state, cases like this.

Now, there is no hard rule and there, as always in programming, is no clear wrong or right. You can certainly also handle cases
where useReducer would be good with just useState, especially when combining that with useEffect.
But sometimes using useReducer just might be more elegant, or simpler. On the other hand, you should absolutely not always
useReducer because often that will be overkill. If you have just a simple state that just switches between two different values.
Using useReducer might be overkill.

Now, you could absolutely also use useReducer to manage the form state as a whole with useReducer, instead of using useState
for form validity, you could replace these two reducers and the form validity with one big reducer that manages the entire form
but that's something I will come back to later in the form's module. Since, for now, it's just important that you understand
useReducer and when to use it.